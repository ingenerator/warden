<?php
/**
 * Specify the behaviour of the top-level Warden class
 *
 * @author     Andrew Coulton <andrew@ingenerator.com>
 * @copyright  2013 inGenerator Ltd
 * @licence    BSD
 */

namespace spec;

// Include the Kohana environment generated by koharness
require_once(__DIR__.'/../koharness_bootstrap.php');

// Require the Session_Fake driver provided by koharness
require_once(KOHARNESS_SRC.'helper_classes/Session/Fake.php');

use PhpSpec\Exception\Example\FailureException;
use PhpSpec\ObjectBehavior;
use Prophecy\Argument;

/**
 * Specify the behaviour of the top-level Warden class
 *
 * @package spec
 * @see \Warden
 * @see \Warden\Warden
 */
class WardenSpec extends ObjectBehavior
{
	/**
	 * @var \Session_Fake it is not possible to mock the Session class with Prophecy
	 */
	protected $session = NULL;

	/**
	 * @param \Doctrine\ORM\EntityManager   $entity_manager
	 * @param \Model\Repository\User        $repository
	 */
	public function let($entity_manager, $repository)
	{
		$entity_manager->getRepository('Model\User')->willReturn($repository);
		$entity_manager->flush(Argument::any())->willReturn(NULL);

		$this->session = new \Session_Fake;

		$this->beConstructedWith($entity_manager, $this->session);
	}

    public function it_is_initializable()
    {
        $this->shouldHaveType('Warden');
    }

	/**
	 * @param \Model\Repository\User $repository
	 * @param \Model\User            $user
	 */
	public function it_authenticates_a_user_by_email_and_password($repository, $user)
	{
		$repository->findOneBy(array('email' => 'me@foo.com'))->willReturn($user);
		$user->verify_password('my-password')->willReturn(TRUE);

		$this->authenticate('me@foo.com', 'my-password')->shouldReturn($user);
	}

	/**
	 * @param \Model\Repository\User $repository
	 */
	public function it_throws_unknown_user_from_authenticate_if_email_not_registered($repository)
	{
		$repository->findOneBy(array('email' => 'me@foo.com'))->willReturn(NULL);

		$this->shouldThrow('Warden\Exception\Authentication\UnknownUserException')
			->duringAuthenticate('me@foo.com', 'my-password');
	}

	/**
	 * @param \Model\Repository\User $repository
	 * @param \Model\User            $user
	 */
	public function it_throws_invalid_password_from_authenticate_if_password_incorrect($repository, $user)
	{
		$repository->findOneBy(array('email' => 'me@foo.com'))->willReturn($user);
		$user->verify_password('wrong-password')->willReturn(FALSE);

		$this->shouldThrow('Warden\Exception\Authentication\InvalidPasswordException')
			->duringAuthenticate('me@foo.com', 'wrong-password');
	}

	/**
	 * @param \Doctrine\ORM\EntityManager $entity_manager
	 * @param \Model\Repository\User      $repository
	 * @param \Model\User                 $user
	 */
	public function it_marks_user_for_persistence_during_authenticate_if_password_upgraded($entity_manager, $repository, $user)
	{
		$repository->findOneBy(array('email' => 'me@foo.com'))->willReturn($user);
		$user->verify_password('my-password')->willReturn(\Model\User::PASSWORD_OK_UPGRADED);

		$entity_manager->persist($user)->shouldBeCalled();

		$this->authenticate('me@foo.com', 'my-password')->shouldReturn($user);
	}

	/**
	 * @param \Doctrine\ORM\EntityManager $entity_manager
	 * @param \Model\User                 $user
	 *
	 * @throws \PhpSpec\Exception\Example\FailureException on failure
	 */
	public function it_logs_a_user_in_stores_in_session_and_records_the_last_login_time($entity_manager, $user)
	{
		$user->update_last_login()->shouldBeCalled();
		$entity_manager->flush($user)->shouldBeCalled();

		$user->get_id()->willReturn('5');

		$this->login($user);

		if ( ! 5 === $this->session->get('warden.current_user'))
		{
			throw new FailureException("Expected to find the current user ID in the session");
		}
	}

	/**
	 * @param \Model\User $user
	 *
	 * @throws \PhpSpec\Exception\Example\FailureException on failure
	 */
	public function it_regenerates_the_session_id_when_user_logs_in($user)
	{
		$id_before = $this->session->id();

		$this->login($user);

		if ($this->session->id() == $id_before)
		{
			throw new FailureException("Expected the session ID to be regenerated on login");
		}
	}

	/**
	 * @param \Model\Repository\User      $repository
	 * @param \Model\User                 $user
	 */
	public function it_returns_current_user_when_user_is_logged_in($repository, $user)
	{
		$this->session->set('warden.current_user', 8);
		$repository->find(8)->willReturn($user);

		$this->current_user()->shouldReturn($user);
	}

	/**
	 * @param \Model\Repository\User      $repository
	 */
	public function it_returns_no_user_when_no_user_is_logged_in($repository)
	{
		$repository->find(Argument::any())->shouldNotBeCalled();
		$this->current_user()->shouldReturn(NULL);
	}

	/**
	 * @param \Model\Repository\User $repository
	 *
	 * @throws \PhpSpec\Exception\Example\FailureException on failure
	 */
	public function it_throws_unexpected_value_and_clears_session_if_current_user_does_not_match_a_valid_user($repository)
	{
		$this->session->set('warden.current_user', 10);
		$repository->find(10)->willReturn(NULL);

		$this->shouldThrow('\UnexpectedValueException')
	        ->during('current_user');

		if ($this->session->get('warden.current_user') !== NULL)
		{
			throw new FailureException("Expected current_user to empty the session user id if it is invalid");
		}
	}

	public function it_destroys_the_session_when_user_logs_out()
	{
		$this->session->set('sensitive-user-stuff', 'my-value');

		$this->logout();

		if ($this->session->get('sensitive-user-stuff'))
		{
			throw new FailureException("Expected the session to be destroyed when the user was logged out");
		}

		$this->current_user()->shouldReturn(NULL);
	}

}
